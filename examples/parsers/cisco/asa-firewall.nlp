--[[
NetLog Parser DSL Script: Cisco ASA Firewall Parser
Device Type: CiscoASA
Version: 1.1.0
Description: Parser for Cisco ASA/FTD firewall log messages

Supported log formats:
- ASA syslog format with message IDs
- Built/teardown connections
- Access control decisions
- VPN events and SSL/TLS sessions
- Threat detection events

Example messages:
- %ASA-6-302013: Built inbound TCP connection 12345 for outside:192.168.1.100/443 to inside:10.0.0.50/8080
- %ASA-4-106023: Deny tcp src outside:192.168.1.200/12345 dst inside:10.0.0.100/80 by access-group "outside_access_in"
- %ASA-6-725001: Starting SSL handshake with client outside:192.168.1.150/443 for TLSv1.2 session
]]--

local PARSER_NAME = "Cisco ASA Firewall Parser"
local PARSER_VERSION = "1.1.0"
local DEVICE_TYPE = "CiscoASA"

-- ASA-specific patterns
local patterns = {
    -- Standard ASA format: %ASA-SEVERITY-MSGID: message
    standard = "^%%ASA%-(%d+)%-(%d+): (.+)$",

    -- With timestamp: MMM DD YYYY HH:MM:SS %ASA-SEVERITY-MSGID: message
    with_timestamp = "^(%w+ %d+ %d+ %d+:%d+:%d+) %%ASA%-(%d+)%-(%d+): (.+)$",

    -- With hostname: MMM DD YYYY HH:MM:SS hostname %ASA-SEVERITY-MSGID: message
    with_hostname = "^(%w+ %d+ %d+ %d+:%d+:%d+) (%S+) %%ASA%-(%d+)%-(%d+): (.+)$"
}

local severity_map = {
    [0] = "emergency",
    [1] = "alert",
    [2] = "critical",
    [3] = "error",
    [4] = "warning",
    [5] = "notice",
    [6] = "info",
    [7] = "debug"
}

-- ASA message ID categories and their meanings
local asa_message_categories = {
    -- Connection messages (302xxx, 305xxx)
    ["302"] = {category = "connection", subcategory = "built"},
    ["305"] = {category = "connection", subcategory = "teardown"},

    -- Access control (106xxx)
    ["106"] = {category = "access_control", subcategory = "permit_deny"},

    -- AAA messages (109xxx, 113xxx)
    ["109"] = {category = "aaa", subcategory = "authentication"},
    ["113"] = {category = "aaa", subcategory = "authorization"},

    -- VPN messages (722xxx, 725xxx)
    ["722"] = {category = "vpn", subcategory = "group_policy"},
    ["725"] = {category = "vpn", subcategory = "ssl_vpn"},

    -- Interface messages (411xxx)
    ["411"] = {category = "interface", subcategory = "status"},

    -- NAT messages (305xxx when related to NAT)
    ["305"] = {category = "nat", subcategory = "translation"},

    -- Threat detection (733xxx)
    ["733"] = {category = "threat_detection", subcategory = "ids"},

    -- System messages (199xxx)
    ["199"] = {category = "system", subcategory = "general"}
}

function get_parser_name()
    return PARSER_NAME
end

function get_version()
    return PARSER_VERSION
end

function get_device_type()
    return DEVICE_TYPE
end

function get_supported_patterns()
    local pattern_list = {}
    for _, pattern in pairs(patterns) do
        table.insert(pattern_list, pattern)
    end
    return pattern_list
end

function can_parse(raw_message)
    -- Quick check for ASA message format
    if not string.find(raw_message, "%%ASA%-", 1, true) then
        return false
    end

    -- Verify it matches one of our patterns
    for _, pattern in pairs(patterns) do
        if string.match(raw_message, pattern) then
            return true
        end
    end

    return false
end

function parse(raw_message)
    netlog.log_debug("Parsing ASA firewall message: " .. raw_message)

    local timestamp_str, hostname, severity_num, message_id, message
    local parsed = false

    -- Try patterns in order of specificity
    timestamp_str, hostname, severity_num, message_id, message =
        string.match(raw_message, patterns.with_hostname)
    if severity_num then
        parsed = true
    else
        timestamp_str, severity_num, message_id, message =
            string.match(raw_message, patterns.with_timestamp)
        if severity_num then
            parsed = true
        else
            severity_num, message_id, message =
                string.match(raw_message, patterns.standard)
            if severity_num then
                parsed = true
            end
        end
    end

    if not parsed then
        netlog.log_debug("No ASA pattern matched")
        return nil
    end

    local entry = netlog.create_log_entry()

    -- Parse timestamp
    if timestamp_str then
        entry.timestamp = netlog.parse_timestamp(timestamp_str)
    else
        entry.timestamp = os.time()
    end

    -- Set severity
    local severity_int = tonumber(severity_num) or 6
    entry.severity = severity_map[severity_int] or "info"

    -- Set basic fields
    entry.facility = "ASA"
    entry.message = message
    entry.hostname = hostname
    entry.process_name = "ASA-" .. message_id

    -- Add ASA-specific metadata
    entry.metadata = {
        asa_message_id = message_id,
        asa_severity_code = severity_num,
        message_format = "cisco_asa"
    }

    -- Add message category information
    local msg_prefix = string.sub(message_id, 1, 3)
    if asa_message_categories[msg_prefix] then
        entry.metadata.message_category = asa_message_categories[msg_prefix].category
        entry.metadata.message_subcategory = asa_message_categories[msg_prefix].subcategory
    end

    -- Parse specific ASA message types
    parse_asa_specific_messages(entry, message_id, message)

    netlog.log_debug("Successfully parsed ASA message")
    return entry
end

function parse_asa_specific_messages(entry, message_id, message)
    local msg_id = tonumber(message_id)

    -- Connection built messages (302xxx)
    if msg_id >= 302001 and msg_id <= 302999 then
        parse_connection_built(entry, message)

    -- Connection teardown messages (305xxx)
    elseif msg_id >= 305001 and msg_id <= 305999 then
        parse_connection_teardown(entry, message)

    -- Access control messages (106xxx)
    elseif msg_id >= 106001 and msg_id <= 106999 then
        parse_access_control(entry, message)

    -- VPN SSL messages (725xxx)
    elseif msg_id >= 725001 and msg_id <= 725999 then
        parse_ssl_vpn(entry, message)

    -- Authentication messages (109xxx)
    elseif msg_id >= 109001 and msg_id <= 109999 then
        parse_authentication(entry, message)

    -- NAT translation messages
    elseif msg_id >= 305005 and msg_id <= 305012 then
        parse_nat_translation(entry, message)

    -- Interface status messages (411xxx)
    elseif msg_id >= 411001 and msg_id <= 411999 then
        parse_interface_status(entry, message)
    end
end

function parse_connection_built(entry, message)
    -- Example: Built inbound TCP connection 12345 for outside:192.168.1.100/443 to inside:10.0.0.50/8080
    local direction, protocol, conn_id, src_zone, src_ip, src_port, dst_zone, dst_ip, dst_port =
        string.match(message, "Built (%w+) (%w+) connection (%d+) for (%w+):([%d%.]+)/(%d+) to (%w+):([%d%.]+)/(%d+)")

    if conn_id then
        entry.metadata.event_type = "connection_built"
        entry.metadata.connection_id = conn_id
        entry.metadata.direction = direction
        entry.metadata.protocol = protocol:lower()
        entry.metadata.src_zone = src_zone
        entry.metadata.src_ip = src_ip
        entry.metadata.src_port = src_port
        entry.metadata.dst_zone = dst_zone
        entry.metadata.dst_ip = dst_ip
        entry.metadata.dst_port = dst_port
    end
end

function parse_connection_teardown(entry, message)
    -- Example: Teardown TCP connection 12345 for outside:192.168.1.100/443 to inside:10.0.0.50/8080 duration 0:05:30 bytes 1024
    local protocol, conn_id, src_zone, src_ip, src_port, dst_zone, dst_ip, dst_port, duration, bytes =
        string.match(message, "Teardown (%w+) connection (%d+) for (%w+):([%d%.]+)/(%d+) to (%w+):([%d%.]+)/(%d+) duration ([%d:]+) bytes (%d+)")

    if conn_id then
        entry.metadata.event_type = "connection_teardown"
        entry.metadata.connection_id = conn_id
        entry.metadata.protocol = protocol:lower()
        entry.metadata.src_zone = src_zone
        entry.metadata.src_ip = src_ip
        entry.metadata.src_port = src_port
        entry.metadata.dst_zone = dst_zone
        entry.metadata.dst_ip = dst_ip
        entry.metadata.dst_port = dst_port
        entry.metadata.duration = duration
        entry.metadata.bytes_transferred = bytes
    end
end

function parse_access_control(entry, message)
    -- Example: Deny tcp src outside:192.168.1.200/12345 dst inside:10.0.0.100/80 by access-group "outside_access_in"
    local action, protocol, src_zone, src_ip, src_port, dst_zone, dst_ip, dst_port, acl_name =
        string.match(message, "(%w+) (%w+) src (%w+):([%d%.]+)/(%d+) dst (%w+):([%d%.]+)/(%d+) by access%-group \"([%w_%-]+)\"")

    if action then
        entry.metadata.event_type = "access_control_decision"
        entry.metadata.action = action:lower()
        entry.metadata.protocol = protocol:lower()
        entry.metadata.src_zone = src_zone
        entry.metadata.src_ip = src_ip
        entry.metadata.src_port = src_port
        entry.metadata.dst_zone = dst_zone
        entry.metadata.dst_ip = dst_ip
        entry.metadata.dst_port = dst_port
        entry.metadata.acl_name = acl_name
    end
end

function parse_ssl_vpn(entry, message)
    -- Example: Starting SSL handshake with client outside:192.168.1.150/443 for TLSv1.2 session
    if string.find(message, "Starting SSL handshake") then
        local client_zone, client_ip, client_port, tls_version =
            string.match(message, "client (%w+):([%d%.]+)/(%d+) for (%S+) session")

        if client_ip then
            entry.metadata.event_type = "ssl_vpn_handshake_start"
            entry.metadata.client_zone = client_zone
            entry.metadata.client_ip = client_ip
            entry.metadata.client_port = client_port
            entry.metadata.tls_version = tls_version
        end

    elseif string.find(message, "SSL session") then
        local session_action = string.find(message, "terminated") and "terminated" or "established"
        entry.metadata.event_type = "ssl_vpn_session_" .. session_action

        local client_ip = string.match(message, "from ([%d%.]+)")
        if client_ip then
            entry.metadata.client_ip = client_ip
        end
    end
end

function parse_authentication(entry, message)
    -- Example: Authentication failed for user admin from 192.168.1.10/1234
    if string.find(message, "Authentication") then
        local result = string.find(message, "failed") and "failed" or "successful"
        local user = string.match(message, "for user (%w+)")
        local src_ip = string.match(message, "from ([%d%.]+)")

        entry.metadata.event_type = "authentication_" .. result
        if user then
            entry.metadata.username = user
        end
        if src_ip then
            entry.metadata.src_ip = src_ip
        end
    end
end

function parse_nat_translation(entry, message)
    -- Example: Built dynamic translation from inside:10.0.0.100 to outside:192.168.1.50
    if string.find(message, "translation") then
        local src_zone, src_ip, dst_zone, dst_ip =
            string.match(message, "from (%w+):([%d%.]+) to (%w+):([%d%.]+)")

        if src_ip then
            entry.metadata.event_type = "nat_translation"
            entry.metadata.src_zone = src_zone
            entry.metadata.original_ip = src_ip
            entry.metadata.dst_zone = dst_zone
            entry.metadata.translated_ip = dst_ip
        end
    end
end

function parse_interface_status(entry, message)
    -- Example: Interface GigabitEthernet0/0 is up
    local interface, status = string.match(message, "Interface (%S+) is (%w+)")
    if interface then
        entry.metadata.event_type = "interface_status_change"
        entry.metadata.interface = interface
        entry.metadata.interface_status = status
    end
end

function initialize()
    netlog.log_info("Cisco ASA Firewall Parser v" .. PARSER_VERSION .. " initialized")
end

function run_self_test()
    local test_messages = {
        "%ASA-6-302013: Built inbound TCP connection 12345 for outside:192.168.1.100/443 to inside:10.0.0.50/8080",
        "%ASA-4-106023: Deny tcp src outside:192.168.1.200/12345 dst inside:10.0.0.100/80 by access-group \"outside_access_in\"",
        "%ASA-6-725001: Starting SSL handshake with client outside:192.168.1.150/443 for TLSv1.2 session",
        "Jan 15 2024 10:30:45 firewall01 %ASA-6-305011: Built dynamic TCP translation from inside:10.0.0.100/12345 to outside:192.168.1.50/12345"
    }

    netlog.log_info("Running self-test for Cisco ASA Firewall Parser")

    for i, msg in ipairs(test_messages) do
        local can_parse_result = can_parse(msg)
        local parse_result = parse(msg)

        netlog.log_info(string.format("Test %d - Can parse: %s, Parse result: %s",
            i, tostring(can_parse_result), parse_result and "success" or "failed"))
    end
end