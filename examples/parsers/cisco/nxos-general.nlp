--[[
NetLog Parser DSL Script: Cisco NX-OS General Parser
Device Type: CiscoNXOS
Version: 1.1.0
Description: General-purpose parser for Cisco NX-OS log messages

Supported log formats:
- Standard NX-OS syslog format with timestamps
- Facility-based message categorization
- VDC (Virtual Device Context) support
- Port-channel, VLAN, and fabric events

Example messages:
- 2024 Jan 15 10:30:45 switch01 %ETHPORT-5-IF_DOWN_ADMIN_DOWN: Interface Ethernet1/1 is down (Administratively down)
- 2024 Jan 15 10:31:02 switch01 %VSHD-5-VSHD_SYSLOG_CONFIG_I: Configured from vty by admin on 192.168.1.100
- 2024 Jan 15 10:31:15 switch01 %$ VDC-1 %$ %SYSMGR-2-SERVICE_CRASHED: Service "ospf" crashed
]]--

local PARSER_NAME = "Cisco NX-OS General Parser"
local PARSER_VERSION = "1.1.0"
local DEVICE_TYPE = "CiscoNXOS"

-- NX-OS specific patterns
local patterns = {
    -- Standard NX-OS format: YYYY MMM DD HH:MM:SS hostname %FACILITY-SEVERITY-MNEMONIC: message
    standard = "^(%d+) (%w+ %d+ %d+:%d+:%d+) (%S+) %%([%w_%-]+)%-(%d+)%-([%w_]+): (.+)$",

    -- With VDC context: YYYY MMM DD HH:MM:SS hostname %$ VDC-N %$ %FACILITY-SEVERITY-MNEMONIC: message
    with_vdc = "^(%d+) (%w+ %d+ %d+:%d+:%d+) (%S+) %%$ VDC%-(%d+) %%$ %%([%w_%-]+)%-(%d+)%-([%w_]+): (.+)$",

    -- Simplified format (some NX-OS versions)
    simple = "^(%w+ %d+ %d+:%d+:%d+) %%([%w_%-]+)%-(%d+)%-([%w_]+): (.+)$"
}

local severity_map = {
    [0] = "emergency",
    [1] = "alert",
    [2] = "critical",
    [3] = "error",
    [4] = "warning",
    [5] = "notice",
    [6] = "info",
    [7] = "debug"
}

-- NX-OS specific facilities and their context
local nxos_facilities = {
    ETHPORT = {description = "Ethernet Port Management", category = "interface"},
    VSHD = {description = "Virtual Shell Daemon", category = "system"},
    SYSMGR = {description = "System Manager", category = "system"},
    PLATFORM = {description = "Platform Management", category = "hardware"},
    PFMA = {description = "Platform Fabric Manager", category = "fabric"},
    PORT_CHANNEL = {description = "Port Channel Management", category = "interface"},
    VLAN = {description = "VLAN Management", category = "layer2"},
    STP = {description = "Spanning Tree Protocol", category = "layer2"},
    OSPF = {description = "OSPF Routing", category = "routing"},
    BGP = {description = "BGP Routing", category = "routing"},
    HSRP = {description = "Hot Standby Router Protocol", category = "layer3"},
    VPC = {description = "Virtual Port Channel", category = "interface"},
    LICMGR = {description = "License Manager", category = "system"}
}

function get_parser_name()
    return PARSER_NAME
end

function get_version()
    return PARSER_VERSION
end

function get_device_type()
    return DEVICE_TYPE
end

function get_supported_patterns()
    local pattern_list = {}
    for _, pattern in pairs(patterns) do
        table.insert(pattern_list, pattern)
    end
    return pattern_list
end

function can_parse(raw_message)
    -- Quick check for NX-OS timestamp format (year at start)
    if not string.match(raw_message, "^%d%d%d%d ") and not string.match(raw_message, "^%w+ %d+ %d+:%d+:%d+") then
        return false
    end

    -- Check for NX-OS facility format
    if not string.find(raw_message, "%%", 1, true) then
        return false
    end

    -- Verify it matches one of our patterns
    for _, pattern in pairs(patterns) do
        if string.match(raw_message, pattern) then
            return true
        end
    end

    return false
end

function parse(raw_message)
    netlog.log_debug("Parsing NX-OS message: " .. raw_message)

    local year, timestamp_str, hostname, vdc, facility, severity_num, mnemonic, message
    local parsed = false

    -- Try VDC format first (most specific)
    year, timestamp_str, hostname, vdc, facility, severity_num, mnemonic, message =
        string.match(raw_message, patterns.with_vdc)
    if facility then
        parsed = true
    else
        -- Try standard format
        year, timestamp_str, hostname, facility, severity_num, mnemonic, message =
            string.match(raw_message, patterns.standard)
        if facility then
            parsed = true
        else
            -- Try simple format
            timestamp_str, facility, severity_num, mnemonic, message =
                string.match(raw_message, patterns.simple)
            if facility then
                parsed = true
            end
        end
    end

    if not parsed then
        netlog.log_debug("No NX-OS pattern matched")
        return nil
    end

    local entry = netlog.create_log_entry()

    -- Parse timestamp
    local full_timestamp = year and (year .. " " .. timestamp_str) or timestamp_str
    entry.timestamp = netlog.parse_timestamp(full_timestamp)

    -- Set severity
    local severity_int = tonumber(severity_num) or 6
    entry.severity = severity_map[severity_int] or "info"

    -- Set basic fields
    entry.facility = facility
    entry.message = message
    entry.hostname = hostname
    entry.process_name = facility .. "-" .. mnemonic

    -- Add NX-OS specific metadata
    entry.metadata = {
        nxos_facility = facility,
        nxos_mnemonic = mnemonic,
        nxos_severity_code = severity_num,
        message_format = "cisco_nxos"
    }

    -- Add VDC information if present
    if vdc then
        entry.metadata.vdc_id = vdc
    end

    -- Add facility context
    if nxos_facilities[facility] then
        entry.metadata.facility_description = nxos_facilities[facility].description
        entry.metadata.facility_category = nxos_facilities[facility].category
    end

    -- Parse specific NX-OS message types
    parse_nxos_specific_messages(entry, facility, mnemonic, message)

    netlog.log_debug("Successfully parsed NX-OS message")
    return entry
end

function parse_nxos_specific_messages(entry, facility, mnemonic, message)
    if facility == "ETHPORT" then
        if mnemonic == "IF_DOWN_ADMIN_DOWN" or mnemonic == "IF_DOWN_LINK_FAILURE" or
           mnemonic == "IF_UP" or mnemonic == "IF_DOWN" then
            local interface = string.match(message, "Interface (%S+)")
            if interface then
                entry.metadata.interface = interface
                entry.metadata.event_type = "interface_state_change"

                -- Determine the new state
                if string.find(message, "is down") then
                    entry.metadata.interface_state = "down"
                    if string.find(message, "Administratively down") then
                        entry.metadata.admin_state = "down"
                    elseif string.find(message, "Link failure") then
                        entry.metadata.failure_reason = "link_failure"
                    end
                elseif string.find(message, "is up") then
                    entry.metadata.interface_state = "up"
                end
            end
        end

    elseif facility == "PORT_CHANNEL" then
        if mnemonic == "IF_UP" or mnemonic == "IF_DOWN" then
            local interface = string.match(message, "Interface (%S+)")
            if interface then
                entry.metadata.interface = interface
                entry.metadata.interface_type = "port_channel"
                entry.metadata.event_type = "port_channel_state_change"
            end
        elseif mnemonic == "INDIVIDUAL" then
            local member_port = string.match(message, "port (%S+)")
            local port_channel = string.match(message, "port%-channel (%S+)")
            if member_port and port_channel then
                entry.metadata.member_port = member_port
                entry.metadata.port_channel = port_channel
                entry.metadata.event_type = "port_channel_member_change"
            end
        end

    elseif facility == "VLAN" then
        if mnemonic == "VLAN_UP" or mnemonic == "VLAN_DOWN" then
            local vlan_id = string.match(message, "VLAN (%d+)")
            if vlan_id then
                entry.metadata.vlan_id = vlan_id
                entry.metadata.event_type = "vlan_state_change"
                entry.metadata.vlan_state = string.find(mnemonic, "UP") and "up" or "down"
            end
        end

    elseif facility == "STP" then
        if string.find(mnemonic, "PORT") then
            local interface, vlan = string.match(message, "(%S+) VLAN(%d+)")
            if interface and vlan then
                entry.metadata.interface = interface
                entry.metadata.vlan_id = vlan
                entry.metadata.event_type = "stp_port_state_change"

                -- Parse STP state
                if string.find(message, "forwarding") then
                    entry.metadata.stp_state = "forwarding"
                elseif string.find(message, "blocking") then
                    entry.metadata.stp_state = "blocking"
                elseif string.find(message, "listening") then
                    entry.metadata.stp_state = "listening"
                elseif string.find(message, "learning") then
                    entry.metadata.stp_state = "learning"
                end
            end
        end

    elseif facility == "SYSMGR" then
        if mnemonic == "SERVICE_CRASHED" then
            local service = string.match(message, 'Service "([%w_%-]+)"')
            if service then
                entry.metadata.crashed_service = service
                entry.metadata.event_type = "service_crash"
            end
        elseif mnemonic == "SERVICE_STARTED" then
            local service = string.match(message, 'Service "([%w_%-]+)"')
            if service then
                entry.metadata.started_service = service
                entry.metadata.event_type = "service_start"
            end
        end

    elseif facility == "VPC" then
        if string.find(mnemonic, "PEER") then
            local peer_ip = string.match(message, "peer ([%d%.]+)")
            if peer_ip then
                entry.metadata.vpc_peer = peer_ip
                entry.metadata.event_type = "vpc_peer_change"
            end
        end

    elseif facility == "VSHD" then
        if mnemonic == "VSHD_SYSLOG_CONFIG_I" then
            local user, source_ip = string.match(message, "by (%w+) on ([%d%.]+)")
            if user then
                entry.metadata.config_user = user
                entry.metadata.config_source_ip = source_ip
                entry.metadata.event_type = "configuration_change"
            end
        end
    end
end

function initialize()
    netlog.log_info("Cisco NX-OS General Parser v" .. PARSER_VERSION .. " initialized")
end

-- Self-test function
function run_self_test()
    local test_messages = {
        "2024 Jan 15 10:30:45 nxos-switch01 %ETHPORT-5-IF_DOWN_ADMIN_DOWN: Interface Ethernet1/1 is down (Administratively down)",
        "2024 Jan 15 10:31:02 nxos-switch01 %VSHD-5-VSHD_SYSLOG_CONFIG_I: Configured from vty by admin on 192.168.1.100",
        "2024 Jan 15 10:31:15 nxos-switch01 %$ VDC-1 %$ %SYSMGR-2-SERVICE_CRASHED: Service \"ospf\" crashed",
        "2024 Jan 15 10:32:00 nxos-switch01 %PORT_CHANNEL-5-IF_UP: Interface port-channel10 is up"
    }

    netlog.log_info("Running self-test for Cisco NX-OS General Parser")

    for i, msg in ipairs(test_messages) do
        local can_parse_result = can_parse(msg)
        local parse_result = parse(msg)

        netlog.log_info(string.format("Test %d - Can parse: %s, Parse result: %s",
            i, tostring(can_parse_result), parse_result and "success" or "failed"))
    end
end