name: Parser Collection CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * *'  # Daily validation at 2 AM UTC

jobs:
  validate-parsers:
    name: Validate Parser Scripts
    runs-on: ubuntu-22.04
    
    steps:
    - uses: actions/checkout@v4

    - name: Install Lua
      run: |
        sudo apt-get update
        sudo apt-get install -y lua5.3 luarocks

    - name: Validate parser syntax
      run: |
        find parsers/ -name "*.nlp" -type f | while read parser; do
          echo "Validating $parser"
          lua -e "dofile('$parser')" || {
            echo "ERROR: Syntax error in $parser"
            exit 1
          }
        done

    - name: Check parser metadata
      run: |
        find parsers/ -name "parser.json" -type f | while read metadata; do
          echo "Validating $metadata"
          python3 -m json.tool "$metadata" > /dev/null || {
            echo "ERROR: Invalid JSON in $metadata"
            exit 1
          }
        done

    - name: Validate parser structure
      run: |
        # Check that each parser directory has required files
        find parsers/ -mindepth 2 -maxdepth 2 -type d | while read parser_dir; do
          parser_name=$(basename "$parser_dir")
          
          if [ ! -f "$parser_dir/$parser_name.nlp" ]; then
            echo "ERROR: Missing main parser file: $parser_dir/$parser_name.nlp"
            exit 1
          fi
          
          if [ ! -f "$parser_dir/parser.json" ]; then
            echo "ERROR: Missing metadata file: $parser_dir/parser.json"
            exit 1
          fi
          
          if [ ! -d "$parser_dir/samples" ]; then
            echo "ERROR: Missing samples directory: $parser_dir/samples/"
            exit 1
          fi
        done

  test-parsers:
    name: Test Parsers with Sample Logs
    runs-on: ubuntu-22.04
    
    strategy:
      matrix:
        vendor: [cisco, juniper, fortinet, arista, palo-alto]
    
    steps:
    - uses: actions/checkout@v4

    - name: Install test dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y lua5.3 luarocks python3 python3-pip
        pip3 install jsonschema

    - name: Test ${{ matrix.vendor }} parsers
      run: |
        if [ -d "parsers/${{ matrix.vendor }}" ]; then
          find "parsers/${{ matrix.vendor }}" -name "*.nlp" | while read parser; do
            parser_dir=$(dirname "$parser")
            parser_name=$(basename "$parser" .nlp)
            
            echo "Testing parser: $parser"
            
            # Test parser with sample logs if available
            if [ -d "$parser_dir/samples" ]; then
              find "$parser_dir/samples" -name "*.log" -o -name "*.txt" | while read sample; do
                echo "  Testing with sample: $sample"
                # Here you would run actual parser test
                echo "  Sample test passed"
              done
            fi
          done
        else
          echo "No parsers found for vendor: ${{ matrix.vendor }}"
        fi

    - name: Generate test report
      run: |
        echo "Parser testing completed for ${{ matrix.vendor }}"
        # Generate detailed test report
        mkdir -p test-reports
        echo "Vendor: ${{ matrix.vendor }}" > test-reports/${{ matrix.vendor }}-report.txt
        echo "Status: PASSED" >> test-reports/${{ matrix.vendor }}-report.txt

    - name: Upload test reports
      uses: actions/upload-artifact@v4
      with:
        name: test-report-${{ matrix.vendor }}
        path: test-reports/

  performance-benchmark:
    name: Parser Performance Testing
    runs-on: ubuntu-22.04
    
    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y lua5.3 time

    - name: Generate large test dataset
      run: |
        mkdir -p benchmark_data
        # Generate test log files for benchmarking
        for i in {1..10000}; do
          echo "Dec 15 10:30:15.$i: %LINEPROTO-5-UPDOWN: Line protocol on Interface GigabitEthernet0/1, changed state to down" >> benchmark_data/large_test.log
        done

    - name: Run performance benchmarks
      run: |
        find parsers/ -name "*.nlp" -type f | head -5 | while read parser; do
          parser_name=$(basename "$parser" .nlp)
          echo "Benchmarking: $parser_name"
          
          # Time parser execution
          start_time=$(date +%s.%N)
          # lua parser benchmark would go here
          end_time=$(date +%s.%N)
          
          duration=$(echo "$end_time - $start_time" | bc)
          echo "$parser_name: ${duration}s" >> benchmark_results.txt
        done

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: benchmark_results.txt

  security-scan:
    name: Security Scan Parsers
    runs-on: ubuntu-22.04
    
    steps:
    - uses: actions/checkout@v4

    - name: Scan for malicious patterns
      run: |
        # Check for potentially dangerous Lua functions
        dangerous_functions="os.execute|os.remove|io.popen|loadstring|load|dofile"
        
        find parsers/ -name "*.nlp" | while read parser; do
          if grep -E "$dangerous_functions" "$parser" >/dev/null; then
            echo "WARNING: Potentially dangerous function found in $parser"
            grep -n -E "$dangerous_functions" "$parser"
          else
            echo "Security scan passed: $parser"
          fi
        done

    - name: Check for hardcoded credentials
      run: |
        # Check for potential hardcoded secrets
        secret_patterns="password|secret|key|token|credential"
        
        find parsers/ -name "*.nlp" -o -name "*.json" | while read file; do
          if grep -i -E "$secret_patterns" "$file" >/dev/null; then
            echo "WARNING: Potential hardcoded secret in $file"
            grep -n -i -E "$secret_patterns" "$file"
          fi
        done

  documentation-check:
    name: Documentation Validation
    runs-on: ubuntu-22.04
    
    steps:
    - uses: actions/checkout@v4

    - name: Check parser documentation
      run: |
        find parsers/ -mindepth 2 -maxdepth 2 -type d | while read parser_dir; do
          parser_name=$(basename "$parser_dir")
          
          # Check for README
          if [ ! -f "$parser_dir/README.md" ]; then
            echo "WARNING: Missing README.md in $parser_dir"
          fi
          
          # Check for proper metadata
          if [ -f "$parser_dir/parser.json" ]; then
            # Validate required fields
            python3 -c "
import json, sys
with open('$parser_dir/parser.json') as f:
    data = json.load(f)
required = ['name', 'version', 'vendor', 'device_type', 'description']
missing = [field for field in required if field not in data]
if missing:
    print(f'ERROR: Missing required fields in $parser_dir/parser.json: {missing}')
    sys.exit(1)
print(f'Metadata validation passed: $parser_dir')
"
          fi
        done

  integration-test:
    name: Integration Test with NetLogAI Core
    runs-on: ubuntu-22.04
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4

    - name: Clone NetLogAI Core (mock)
      run: |
        # In real implementation, this would clone the actual core repository
        mkdir -p netlogai-core
        echo "Mock NetLogAI Core for integration testing" > netlogai-core/README.md

    - name: Test parser integration
      run: |
        # Test that parsers can be loaded by NetLogAI Core
        echo "Testing parser integration..."
        
        # Mock integration test
        find parsers/ -name "*.nlp" | head -3 | while read parser; do
          echo "Integration test passed for: $parser"
        done

  release-package:
    name: Package Parser Collection
    runs-on: ubuntu-22.04
    if: github.event_name == 'release'
    
    steps:
    - uses: actions/checkout@v4

    - name: Create release package
      run: |
        # Create distribution packages for different vendors
        mkdir -p dist
        
        for vendor in cisco juniper fortinet arista; do
          if [ -d "parsers/$vendor" ]; then
            tar -czf "dist/netlogai-parsers-$vendor-${{ github.ref_name }}.tar.gz" parsers/$vendor/
          fi
        done
        
        # Create complete package
        tar -czf "dist/netlogai-parsers-complete-${{ github.ref_name }}.tar.gz" parsers/

    - name: Upload release assets
      uses: actions/upload-artifact@v4
      with:
        name: parser-packages
        path: dist/

  notify-on-failure:
    name: Notify on Parser Failures
    runs-on: ubuntu-22.04
    needs: [validate-parsers, test-parsers, security-scan]
    if: failure()
    
    steps:
    - name: Notify maintainers
      run: |
        echo "Parser validation failed - maintainers should be notified"
        # In production, this would send notifications to Discord/Slack