name: NetLogAI Core CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  BUILD_TYPE: Release
  VCPKG_ROOT: ${{ github.workspace }}/vcpkg

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Run secret scanning
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  windows-build:
    name: Windows Build & Test
    runs-on: windows-2022
    needs: security-scan
    
    strategy:
      matrix:
        config: [Debug, Release, Commercial]
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Setup MSVC
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64

    - name: Cache vcpkg
      uses: actions/cache@v4
      with:
        path: |
          ${{ env.VCPKG_ROOT }}
          !${{ env.VCPKG_ROOT }}/buildtrees
          !${{ env.VCPKG_ROOT }}/packages
        key: vcpkg-${{ runner.os }}-${{ hashFiles('vcpkg.json') }}

    - name: Setup vcpkg
      if: steps.cache-vcpkg.outputs.cache-hit != 'true'
      run: |
        git clone https://github.com/Microsoft/vcpkg.git ${{ env.VCPKG_ROOT }}
        ${{ env.VCPKG_ROOT }}\bootstrap-vcpkg.bat
        ${{ env.VCPKG_ROOT }}\vcpkg.exe integrate install

    - name: Install dependencies
      run: |
        ${{ env.VCPKG_ROOT }}\vcpkg.exe install --triplet=x64-windows

    - name: Configure CMake
      run: |
        cmake -B build -S . `
          -DCMAKE_BUILD_TYPE=${{ matrix.config }} `
          -DCMAKE_TOOLCHAIN_FILE=${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake `
          -DVCPKG_TARGET_TRIPLET=x64-windows

    - name: Build
      run: cmake --build build --config ${{ matrix.config }} --parallel 4

    - name: Run tests
      if: matrix.config != 'Commercial'
      run: |
        cd build
        ctest --output-on-failure --parallel 4 --build-config ${{ matrix.config }}

    - name: License validation test
      if: matrix.config == 'Commercial'
      run: |
        # Test commercial build without exposing actual license keys
        ./build/${{ matrix.config }}/netlogai.exe --version
        echo "Commercial build validated successfully"

    - name: Package artifacts
      if: matrix.config == 'Release'
      run: |
        cmake --build build --target package --config Release

    - name: Upload artifacts
      if: matrix.config == 'Release'
      uses: actions/upload-artifact@v4
      with:
        name: netlogai-core-windows-${{ github.sha }}
        path: build/*.msi

  dependency-security:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    needs: security-scan
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Run dependency check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'NetLogAI-Core'
        path: '.'
        format: 'JSON'
        args: >
          --enableRetired
          --enableExperimental

    - name: Upload dependency check results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dependency-check-report
        path: reports/

  code-quality:
    name: Code Quality Analysis
    runs-on: windows-2022
    needs: security-scan
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Setup MSVC
      uses: ilammy/msvc-dev-cmd@v1

    - name: Run static analysis
      run: |
        # Use MSVC static analysis tools
        cl /analyze /W4 src/**/*.cpp /I include /nologo > analysis.log 2>&1 || true
        
    - name: Upload analysis results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: static-analysis-results
        path: analysis.log

  integration-test:
    name: Integration Tests
    runs-on: windows-2022
    needs: [windows-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: netlogai-core-windows-${{ github.sha }}
        path: ./artifacts

    - name: Install application
      run: |
        # Install MSI package
        msiexec /i "artifacts/*.msi" /quiet /norestart
        
    - name: Run integration tests
      run: |
        # Test core functionality without real network devices
        netlogai --version
        netlogai help
        # Add more integration tests here

  release:
    name: Create Release
    runs-on: windows-2022
    needs: [windows-build, dependency-security, code-quality, integration-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[release]')
    
    steps:
    - uses: actions/checkout@v4

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: netlogai-core-windows-${{ github.sha }}
        path: ./release

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: NetLogAI Core v${{ github.run_number }}
        body: |
          ## NetLogAI Core Release v${{ github.run_number }}
          
          **Commercial Enterprise Network Log Analysis Platform**
          
          ### Features
          - AI-powered log analysis and insights
          - Advanced shell interface with git-style commands
          - Cross-device correlation and analytics
          - Extensible plugin architecture
          
          ### Requirements
          - Windows 10/11 x64
          - MSVC 2022 Runtime
          - Commercial license required
          
          ### Installation
          Download and run the MSI installer below.
          
          ### Support
          Enterprise customers: support@netlogai.com
          
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release/*.msi
        asset_name: NetLogAI-Core-Windows-x64.msi
        asset_content_type: application/x-msi

  submodule-sync:
    name: Sync Submodules
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.SUBMODULE_SYNC_TOKEN }}
        submodules: recursive

    - name: Update submodules
      run: |
        git config user.name "NetLogAI Bot"
        git config user.email "bot@netlogai.com"
        git submodule update --recursive --remote
        
        if [ -n "$(git status --porcelain)" ]; then
          git add .
          git commit -m "chore: update submodules to latest versions [automated]"
          git push origin main
        else
          echo "No submodule updates available"
        fi